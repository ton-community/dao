() recv_internal(int msg_value, cell in_msg_cell, slice in_msg) impure {
    ;; Prepare message context
    var cs = in_msg_cell.begin_parse();
    var flags = cs~load_uint(4);  ;; int_msg_info$0 ihr_disabled:Bool bounce:Bool bounced:Bool
    slice s_addr = cs~load_msg_addr();

    ;; Bounced
    ;; DAO accepts all bounced messages in case of invalid 
    ;; message was sent by DAO
    if (flags & 1) {
        return ();
    }

    ;; Load base data
    load_base_data();

    ;; Ignore invalid operations
    if (in_msg.slice_bits() < 32) {
        return ();
    }

    ;; Parse operation
    int op = in_msg~load_uint(32);
    if (op == op::proposal()) {
        op_proposal(s_addr, msg_value, in_msg);
        return ();
    }
    if (op == op::vote()) {
        op_vote(s_addr, msg_value, in_msg);
        return ();
    }
    if (op == op::execute()) {
        op_execute(s_addr, msg_value, in_msg);
        return ();
    }

    ;; Ignore all invalid operations since DAO could vote to return coins to sender
    return ();
}

() recv_external(slice in_msg) impure {
    ;; Do not accept external messages
    throw(error::invalid_message());
}