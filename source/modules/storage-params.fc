_ check_params(cell src) {
    var cs = src.begin_parse();

    ;; Serialization version
    var version = cs~load_uint(1);
    throw_unless(error::internal_error(), version == 0);

    ;; Shares and voting
    var allocated = cs~load_coins(); ;; Check allocated
    throw_unless(error::internal_error(), params::max_shares() >= allocated);
    var base = cs~load_coins(); ;; Base
    var success = cs~load_coins(); ;; Success
    var failure = cs~load_coins(); ;; Failure
    throw_unless(error::internal_error(), base >= success);
    throw_unless(error::internal_error(), base >= failure);

    ;; Proposal cost
    var proposalCost = cs~load_coins();
    throw_unless(error::internal_error(), proposalCost >= coins::1());
    throw_unless(error::internal_error(), proposalCost <= coins::100());

    ;; Check metadata
    if (cs~load_int(1)) {
        cs~load_ref();
    }

    cs.end_parse();
    return true;
}

_ load_proposal_cost(cell src) {
    var cs = src.begin_parse();

    ;; Serialization version
    var version = cs~load_uint(1);
    throw_unless(error::internal_error(), version == 0);

    ;; Allocated
    cs~load_coins();

    ;; Params
    cs~load_coins(); ;; Base
    cs~load_coins(); ;; Success
    cs~load_coins(); ;; Failure

    ;; Proposal cost
    return cs~load_coins();
}

_ load_total_shares_number(cell src) {
    var cs = src.begin_parse();

    ;; Serialization version
    var version = cs~load_uint(1);
    throw_unless(error::internal_error(), version == 0);

    var allocated = cs~load_coins(); ;; Check allocated
    throw_unless(error::internal_error(), params::max_shares() >= allocated);

    return allocated;
}

_ load_voting_params(cell src) {
     var cs = src.begin_parse();

    ;; Serialization version
    var version = cs~load_uint(1);
    throw_unless(error::internal_error(), version == 0);

    ;; Allocated
    cs~load_coins();

    ;; Params
    var base = cs~load_coins();
    var success = cs~load_coins();
    var failure = cs~load_coins();
    return (base, success, failure);
}

_ load_metadata(cell src) {
    var cs = src.begin_parse();
    
    var version = cs~load_uint(1);
    throw_unless(error::internal_error(), version == 0);
    cs~load_coins(); ;; Allocated
    cs~load_coins(); ;; Base
    cs~load_coins(); ;; Success
    cs~load_coins(); ;; Failure
    cs~load_coins(); ;; Proposal Price

    ;; Check metadata
    if (cs~load_int(1)) {
        return cs~load_ref();
    } else {
        return null();
    }
}