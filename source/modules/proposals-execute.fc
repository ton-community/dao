;;
;; Proposal execution
;; NOTE: execution silently fails on invalid proposal to mark proposal as executed instead of crashing transactions
;;       but execution fails if something is wrong
;;

() execute_proposal(cell proposal) impure {

    ;; Begin parsing
    slice cs = proposal.begin_parse();
    int kind = cs~load_uint(32);

    ;; Tansaction
    if (kind == proposal::transaction()) {

        ;; int_msg_info$0 ihr_disabled:Bool bounce:Bool bounced:Bool src:MsgAddress -> 011000 -> 0x18

        ;; Basic message
        slice to_addr = cs~load_msg_addr();
        int value = cs~load_coins();
        var msg = begin_cell()
            .store_uint(0x18, 6)
            .store_slice(to_addr)
            .store_coins(value)
            .store_uint(0, 1 + 4 + 4 + 64 + 32);

        ;; State init
        if (cs~load_int(1)) {
            var stateInit = cs~load_ref();
            msg = msg.store_uint(1, 1);
            msg = msg.store_ref(stateInit);
        } else {
            msg = msg.store_uint(0, 1);
        }

        ;; Payload
        if (cs~load_int(1)) {
            var payload = cs~load_ref();
            msg = msg.store_uint(1, 1);
            msg = msg.store_ref(payload);
        } else {
            msg = msg.store_uint(0, 1);
        }

        ;; Send message
        send_raw_message(msg.end_cell(), 2);
    }

    ;; Destroy contract
    if (kind == proposal::destroy()) {

        ;; Create destroy message
        ;; int_msg_info$0 ihr_disabled:Bool bounce:Bool bounced:Bool src:MsgAddress -> 010000 -> 0x10
        slice to_addr = cs~load_msg_addr();
        var msg = begin_cell()
            .store_uint(0x10, 6)
            .store_slice(to_addr)
            .store_coins(0)
            .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1);

        ;; Send message
        send_raw_message(msg.end_cell(), 32 + 128);
    }

    ;; Upgrade contract
    if (kind == proposal::upgrade()) {
        var expectedVersion = cs~load_uint(16);
        var newCode = cs~load_ref();
        if (ctx_code_version == expectedVersion) {

            ;; Update code version
            ctx_code_version = ctx_code_version + 1;
            store_base_data();

            ;; Update code
            set_code(newCode);

            ;; Upgrade code
            set_c3(newCode.begin_parse().bless());
            storage_upgrade();
            throw(0);
        }
    }

    ;; Update metadata
    if (kind == proposal::params()) {
        var version = cs~load_uint(16);
        cell new_params = cs~load_ref();
        if (ctx_params_version == version) {
            if (check_params(new_params)) {
                ctx_params_version = ctx_params_version + 1;
                ctx_params = new_params;
                store_base_data();   
            }
        }
    }

    ;; Cancel proposal
    if (kind == proposal::cancel()) {
        var id = cs~load_uint(32);
        cancel_proposal(id);
    }

    ;; Allocate proposal
    if (kind == proposal::allocate()) {
        var member = cs~load_uint(256);
        var shares = cs~load_coins();
        allocate_voting_power(member, shares);
    }

    ;; Deallocate proposal
    if (kind == proposal::deallocate()) {
        var member = cs~load_uint(256);
        var shares = cs~load_coins();
        deallocate_voting_power(member, shares);
    }
}