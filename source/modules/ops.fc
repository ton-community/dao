() op_proposal(int member, int value, slice in_msg) impure {

    ;; Check input
    int seq = in_msg~load_uint(32);
    cell proposal = in_msg~load_ref();
    in_msg.end_parse();
    throw_unless(error::invalid_message(), check_proposal(proposal));

    ;; Register input
    register_proposal(seq, proposal, member);
}

() op_vote(int member, int value, slice in_msg) impure {
    
    ;; Check input
    int proposalId = in_msg~load_uint(32);
    int vote = in_msg~load_uint(2);
    in_msg.end_parse();

    ;; Register vote
    register_vote(proposalId, member, vote);
}

() op_execute(int member, int value, slice in_msg) impure {
    
}