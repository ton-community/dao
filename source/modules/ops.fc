() op_proposal(int member, int value, slice in_msg, int query_id) impure {

    ;; Check input
    int seq = in_msg~load_uint(32);
    cell proposal = in_msg~load_ref();
    cell metadata = in_msg~load_ref();
    in_msg.end_parse();
    throw_unless(error::invalid_message(), check_proposal(proposal));

    ;; Register input
    register_proposal(seq, proposal, metadata, member);
    send_empty_receipt_message(member, op::proposal::ok(), query_id);
}

() op_vote(int member, int value, slice in_msg, int query_id) impure {
    
    ;; Check input
    int proposalId = in_msg~load_uint(32);
    int vote = in_msg~load_uint(2);
    in_msg.end_parse();

    ;; Register vote
    register_vote(proposalId, member, vote);
    send_empty_receipt_message(member, op::vote::ok(), query_id);
}

() op_execute(int member, int value, slice in_msg, int query_id) impure {

    ;; Load proposal ID
    int proposalId = in_msg~load_uint(32);
    
    ;; End and validate
    in_msg.end_parse();

    ;; Prepare
    var proposal = prepare_execute(proposalId, member);
    send_empty_receipt_message(member, op::execute::ok(), query_id);
    execute_proposal(proposal);
}