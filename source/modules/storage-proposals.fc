global int ctx_proposal_id;
global int ctx_proposal_state;
global int ctx_proposal_voted_yes;
global int ctx_proposal_voted_no;
global int ctx_proposal_voted_abstain;

;; Params
global int ctx_proposal_author;
global int ctx_proposal_created;
global int ctx_proposal_treshold_success;
global int ctx_proposal_treshold_failure;
global cell ctx_proposal_metadata;

;; Votes
global cell ctx_proposal_votes;

;; Body
global cell ctx_proposal_body;

;; Members
global cell ctx_proposal_members;
global int ctx_proposal_members_total;
global int ctx_proposal_members_shares;
global cell ctx_proposal_params;

;;
;; Loading proposal
;;

() load_proposal(int id) impure {

    ;; Load proposal
    var (itm, found) = ctx_proposals_dict.udict_get?(32, id); ;; NOTE: udict_get_ref could break stack
    throw_unless(error::invalid_message(), found);
    var cl = itm~load_ref();
    itm.end_parse();
    var cs = cl.begin_parse();

    ;; Read
    ctx_proposal_id = id;
    throw_if(error::invalid_message(), cs~load_uint(1) != 0);
    ctx_proposal_state = cs~load_uint(4);
    ctx_proposal_voted_yes = cs~load_coins();
    ctx_proposal_voted_no = cs~load_coins();
    ctx_proposal_voted_abstain = cs~load_coins();
    cell params_cell = cs~load_ref();
    ctx_proposal_votes = cs~load_ref();
    ctx_proposal_body = cs~load_ref();
    cell members_cell = cs~load_ref();
    cs.end_parse();
    
    ;; Params
    cs = params_cell.begin_parse();
    ctx_proposal_author = cs~load_uint(256);
    ctx_proposal_created = cs~load_uint(32);
    ctx_proposal_treshold_success = cs~load_coins();
    ctx_proposal_treshold_failure = cs~load_coins();
    ctx_proposal_params = cs~load_ref();
    ctx_proposal_metadata = cs~load_ref();
    cs.end_parse();

    ;; Members
    cs = members_cell.begin_parse();
    ctx_proposal_members_shares = cs~load_coins();
    ctx_proposal_members_total = cs~load_coins();
    ctx_proposal_members = cs~load_ref();
    cs.end_parse();
}

() store_proposal() impure {

    ;; Serialize proposal
    var container = begin_cell()
        .store_uint(0, 1)
        .store_uint(ctx_proposal_state, 4)
        .store_coins(ctx_proposal_voted_yes)
        .store_coins(ctx_proposal_voted_no)
        .store_coins(ctx_proposal_voted_abstain)
        .store_ref(begin_cell()
            .store_uint(ctx_proposal_author, 256)
            .store_uint(ctx_proposal_created, 32)
            .store_coins(ctx_proposal_treshold_success)
            .store_coins(ctx_proposal_treshold_failure)
            .store_ref(ctx_proposal_params)
            .store_ref(ctx_proposal_metadata)
        .end_cell())
        .store_ref(ctx_proposal_votes)
        .store_ref(ctx_proposal_body)
        .store_ref(begin_cell()
            .store_coins(ctx_proposal_members_shares)
            .store_coins(ctx_proposal_members_total)
            .store_ref(ctx_proposal_members)
        .end_cell())
    .end_cell();

    ;; Store ref
    var data = begin_cell().store_ref(container);
    ctx_proposals_dict = udict_set_builder(ctx_proposals_dict, 32, ctx_proposal_id, data);
}